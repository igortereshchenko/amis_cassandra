create type buyer
(
	buyer_name text
);

create type product
(
	product_name text
);

create type warehouse
(
	warehouse_name text
);

create type produser
(
	produser_name text
);

create type wishtype
(
	product_count int,
	product_id int
);

////////
create table if not exists buyer
(
	buyer_id int,
	buyer_info frozen <buyer>,
	buyer_balance float,
	primary key (buyer_id)
);

create table if not exists product
(
	product_id int,
	warehouse_id int,
	product_info frozen <product>,
	product_price float,
	product_count int,
	primary key (product_id)
);

create table if not exists warehouse
(
	warehouse_id int,
	warehouse_info frozen <warehouse>,
	primary key (warehouse_id)
);

create table if not exists produser
(
	produser_id int,
	produser_info frozen <produser>,
	primary key (produser_id)
);

// if pokypka then -, if postavka then + for count and price
create table if not exists operations
(
	user_wish frozen<wishtype>,
	operations_id int,
	operation_time timestamp,
	buyer_id int,
	product_id int,
	warehouse_id int,
	produser_id int,
	price float,
	count int,
	primary key (warehouse_id, operations_id)
);

//data
//buyer
INSERT INTO buyer JSON 
'{ 
	"buyer_id":1,
	"buyer_info": {"buyer_name":"Buyer1"},
	"buyer_balance": 100.0 
}';

INSERT INTO buyer JSON 
'{ 
	"buyer_id":2,
	"buyer_info": {"buyer_name":"Buyer2"},
	"buyer_balance": 200.0  
}';

//warehouse
INSERT INTO warehouse JSON 
'{ 
	"warehouse_id":1,
	"warehouse_info": {"warehouse_name":"WH1"} 
}';

//product
INSERT INTO product JSON 
'{ 
	"product_id":1,
	"warehouse_id": 1,
	"product_info": {"product_name":"Product1"},
	"product_price": 10,
	"product_count": 0 
}';

INSERT INTO product JSON 
'{ 
	"product_id":2,
	"warehouse_id": 1,
	"product_info": {"product_name":"Product2"},
	"product_price": 20,
	"product_count": 0 
}';

//produser
INSERT INTO produser JSON 
'{ 
	"produser_id":1,
	"produser_info": {"produser_name":"Produser1"} 
}';

INSERT INTO produser JSON 
'{ 
	"produser_id":2,
	"produser_info": {"produser_name":"Produser2"} 
}';


//operations
//postavka: cont>0, prise>0 


//postavka
BEGIN BATCH

INSERT INTO operations 
(user_wish, operations_id, operation_time, buyer_id, product_id, warehouse_id, produser_id, price, count)
VALUES
({"product_count": null, "product_id": null}, 1, '2013-10-01 18:00', null, 1, 1, 1, -10, 20);

UPDATE product 
  SET product_count = 20 
  	WHERE product_id=1;

APPLY BATCH;


BEGIN BATCH

INSERT INTO operations 
(user_wish, operations_id, operation_time, buyer_id, product_id, warehouse_id, produser_id, price, count)
VALUES
({"product_count": null, "product_id": null}, 4, '2013-10-01 14:00', null, 2, 1, 2, -20, 10);

UPDATE product 
  SET product_count = 10 
  	WHERE product_id=2;

APPLY BATCH;

//pokupka
BEGIN BATCH

INSERT INTO operations 
(user_wish, operations_id, operation_time, buyer_id, product_id, warehouse_id, produser_id, price, count)
VALUES
({"product_count": 30, "product_id": 2}, 2, '2013-10-01 19:00', 1, 1, 1, null, 10, -1);

UPDATE product 
  SET product_count = 19 
  	WHERE product_id=1;
  	
UPDATE buyer
	SET buyer_balance = 90
		WHERE buyer_id=1;

APPLY BATCH;


BEGIN BATCH

INSERT INTO operations 
(user_wish, operations_id, operation_time, buyer_id, product_id, warehouse_id, produser_id, price, count)
VALUES
({"product_count": 10, "product_id": 1}, 3, '2013-10-01 19:07', 2, 1, 1, null, 10, -19);

UPDATE product 
  SET product_count = 0 
  	WHERE product_id=1;

UPDATE buyer
	SET buyer_balance = 10
		WHERE buyer_id=2;

APPLY BATCH;



BEGIN BATCH

INSERT INTO operations 
(user_wish, operations_id, operation_time, buyer_id, product_id, warehouse_id, produser_id, price, count)
VALUES
({"product_count": 30, "product_id": 2}, 5, '2013-10-01 19:00', 1, 2, 1, null, 20, -1);

UPDATE product 
  SET product_count = 9 
  	WHERE product_id=2;
  	
UPDATE buyer
	SET buyer_balance = 70
		WHERE buyer_id=1;

APPLY BATCH;



 
select  * from product;
select  * from operations;
select  * from buyer;

create index product on operations (product_id);

select sum(count) from operations where product_id=1;

//what bought and finished (count=0)
create index list_of_buyes on product (product_count);

select product_id from product where product_count=0;
select product_info from product where product_id in (1);


////how many buyer bought smth
//////
create index list_of_buyes_by_buyer on operations (buyer_id);
select count(product_id) from operations where buyer_id=1;

CREATE OR REPLACE FUNCTION sumState(sum int, operation_id int)
RETURNS NULL ON NULL INPUT
RETURNS int
LANGUAGE java
AS $$
	sum= sum+1;
	return sum;
$$;

CREATE OR REPLACE AGGREGATE mySum(int)
	SFUNC sumState
	STYPE int
	INITCOND 0;
	
SELECT mySum(operations_id) 
	FROM operations where buyer_id=1;	
///////	

///map-return for all users not for one
CREATE OR REPLACE FUNCTION cntState(state tuple<int, int>,  operation_id int)
RETURNS NULL ON NULL INPUT
RETURNS tuple<int, int>
LANGUAGE java
AS $$
	//buyer   cnt
	int buyer = state.getInt(0);
	int cnt = state.getInt(1);
    cnt = cnt + 1;
	state.setInt(0, buyer);
	state.setInt(1, cnt);
	return state;
$$; 

CREATE OR REPLACE FUNCTION cntFinal(state tuple<int, int>)
RETURNS NULL ON NULL INPUT
RETURNS int
LANGUAGE java
AS $$
	//buyer   cnt
	int sum = state.getInt(0);
	int cnt = state.getInt(1);
    return cnt;
$$;

CREATE OR REPLACE AGGREGATE myCnt(int)
	SFUNC cntState
	STYPE tuple<int, int> 
	FINALFUNC cntFinal
	INITCOND (0, 0);
	
SELECT myCnt(operations_id) 
	FROM operations where buyer_id=1;	



///how many prod wh sold
//rewrite with map
CREATE OR REPLACE FUNCTION cntState(sum int, buyer_id int)
RETURNS NULL ON NULL INPUT
RETURNS int
LANGUAGE java
AS $$
	sum= sum+1;
	return sum;
$$;

CREATE OR REPLACE AGGREGATE myCnt(int)
	SFUNC cntState
	STYPE int
	INITCOND 0;
	
SELECT mySum(buyer_id) 
	FROM operations where warehouse_id=1;	
